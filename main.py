import asyncio
import random
import sys
import aiohttp
from utils.logger import logger as log
from utils import settings
from core.sniping import fetch_new_gifts
from core.buying import purchase_gifts
from pyrogram import Client


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
if len(sys.argv) > 1:
    cli_profiles = sys.argv[1:]
    settings.ACTIVE_PROFILES = [
        p for p in cli_profiles if p in settings.PROFILES
    ]
    log.info(f"üîß –ü—Ä–æ—Ñ–∏–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞: {', '.join(settings.ACTIVE_PROFILES)}")

else:
    log.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {', '.join(settings.ACTIVE_PROFILES)}")



async def fetch_ip():
    try:
        proxy = settings.PROXY if settings.USE_PROXY else None

        connector = None
        if proxy:
            import aiohttp_socks
            proxy_url = f"{proxy['scheme']}://"
            if proxy['username'] and proxy['password']:
                proxy_url += f"{proxy['username']}:{proxy['password']}@"
            proxy_url += f"{proxy['hostname']}:{proxy['port']}"
            connector = aiohttp_socks.ProxyConnector.from_url(proxy_url)

        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.get("https://api.ipify.org") as resp:
                ip = await resp.text()
                log.info(f"üåç IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {ip}")
    except Exception as e:
        log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")


async def create_clients():
    await fetch_ip()
    proxy = settings.PROXY if settings.USE_PROXY else None

    # –ë–æ—Ç
    bot = Client(
        'TgBot',
        bot_token=settings.BOT_TOKEN,
        api_id=settings.API_ID,
        api_hash=settings.API_HASH,
        proxy=proxy
    )
    await bot.start()
    bot_info = await bot.get_me()
    bot_full_name = f"{bot_info.first_name} {bot_info.last_name or ''}".strip()
    log.info(f"–ö–ª–∏–µ–Ω—Ç –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω: {bot_full_name} (@{bot_info.username}), ID: {bot_info.id}")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_account = Client(
        'TgAccount',
        api_id=settings.API_ID,
        api_hash=settings.API_HASH,
        proxy=proxy
    )
    if settings.GIFT_BUY:
        await user_account.start()
        user_info = await user_account.get_me()

        try:
            await user_account.resolve_peer(settings.ID_BUY)
        except Exception as error:
            log.critical(f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID_BUY: {error}")
            exit(1)

        user_full_name = f"{user_info.first_name} {user_info.last_name or ''}".strip()

        try:
            user_stars = await user_account.get_stars_balance(chat_id="me")
        except Exception as e:
            user_stars = "N/A"
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        log.info(
            f"‚ú® –ö–ª–∏–µ–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_full_name} (@{user_info.username})\n"
            f"üÜî ID: {user_info.id}\n"
            f"üåü –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: {user_stars}\n"
            f"üõí –ß–∞—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ID: {settings.ID_BUY}"
        )
    else:
        log.info("–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

    return bot, user_account


async def run_bot():
    bot_client, user_client = await create_clients()
    log.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤...")

    while True:
        try:
            new_gifts = await fetch_new_gifts(bot_client, user_client)

            if settings.GIFT_BUY and new_gifts:
                await purchase_gifts(
                    bot_client=bot_client,
                    tg_client=user_client,
                    gifts_to_buy=new_gifts
                )

            sleep_time = random.uniform(5, 10)
            await asyncio.sleep(sleep_time)

        except Exception as exc:
            log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {exc}")
            await asyncio.sleep(1)


if __name__ == "__main__":
    print("–°–æ—Ñ—Ç –æ—Ç –ø–∞–±–ª–∏–∫–∞ - https://t.me/mallinmakin")
    asyncio.run(run_bot())
